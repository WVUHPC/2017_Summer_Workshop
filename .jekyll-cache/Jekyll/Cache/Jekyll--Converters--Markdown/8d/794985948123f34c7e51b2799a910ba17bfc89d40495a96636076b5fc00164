I"˜<p>There are a few things you need to know in order to understand why we
do things the way we do.  Some of them are specific to GitHub, rather
than Git itself.</p>

<ol>
  <li>
    <p>Git uses the term ‚Äúclone‚Äù to mean ‚Äúa copy of a repository‚Äù.
GitHub uses the term ‚Äúfork‚Äù to mean, ‚Äúa copy of a GitHub-hosted
repo that is also hosted on GitHub‚Äù, and the term ‚Äúclone‚Äù to mean
‚Äúa copy of a GitHub-hosted repo that‚Äôs located on someone else‚Äôs
machine‚Äù.  In both cases, the duplicate has a remote called
<code class="language-plaintext highlighter-rouge">origin</code> that points to the original repo; other remotes can be
added manually.</p>
  </li>
  <li>
    <p>A user on GitHub can only have one fork of a particular repo.
This is a problem for us because an instructor may be involved in
several workshops, each of which has its own website repo.  Those
website repositories ought to be forks of this one, but since
GitHub doesn‚Äôt allow that, we have to use <code class="language-plaintext highlighter-rouge">import.github.com</code>.</p>
  </li>
  <li>
    <p>If a repository has a file called <code class="language-plaintext highlighter-rouge">README.md</code> in its root
directory, GitHub displays the contents of that file on the
repository‚Äôs home page.</p>
  </li>
  <li>
    <p>If a repository has a branch called <code class="language-plaintext highlighter-rouge">gh-pages</code> (which stands for
‚ÄúGitHub pages‚Äù), then GitHub uses the HTML and Markdown files in
that branch to create a website for the repository.  If the
repository‚Äôs URL is <code class="language-plaintext highlighter-rouge">http://github.com/darwin/finches</code>, the URL
for the website is <code class="language-plaintext highlighter-rouge">http://darwin.github.io/finches</code>.</p>
  </li>
  <li>
    <p>If an HTML or Markdown file has a header consisting of three
dashes, some data about the page, and three more dashes:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
key: value
other_key: other_value
---
stuff in the page
</code></pre></div>    </div>

    <p>then GitHub doesn‚Äôt just copy the file over verbatim.  Instead, it
runs the file through a translator called <a href="https://jekyllrb.com/">Jekyll</a> that
looks for specially-formatted commands embedded in the file and
uses them to fill in the page.</p>
  </li>
  <li>
    <p>Commands can be embedded in the body of a page.  One is
<code class="language-plaintext highlighter-rouge">{% include something.html %}</code>, which tells
Jekyll to copy the contents of <code class="language-plaintext highlighter-rouge">something.html</code> into the file
being translated; this is used to create standard headers and
footers for pages.  Another is ``: when Jekyll sees
this, it replaces it with the value of <code class="language-plaintext highlighter-rouge">variable</code>.  This is used
to insert things like a contact email address and the URL for our
Twitter account.</p>
  </li>
  <li>
    <p>Jekyll gets variables from two places: a file called <code class="language-plaintext highlighter-rouge">_config.yml</code>
located in the repo‚Äôs root directory, and the header of each
individual page.  Variables from <code class="language-plaintext highlighter-rouge">_config.yml</code> are put in an
object called <code class="language-plaintext highlighter-rouge">site</code>, and referred to as <code class="language-plaintext highlighter-rouge">site.variable</code>, so that
(for example) <code class="language-plaintext highlighter-rouge">https://software-carpentry.org</code> in a page is replaced by the URL
of the main Software Carpentry web site.  Variables from the
page‚Äôs header are put in an object called <code class="language-plaintext highlighter-rouge">page</code>, and referred to
as <code class="language-plaintext highlighter-rouge">page.variable</code>, so if a page‚Äôs header defines a variable
called <code class="language-plaintext highlighter-rouge">venue</code>, `` is replaced by ‚ÄúEuphoric State
University‚Äù (or whatever value the variable has).</p>
  </li>
  <li>
    <p>If a page uses <code class="language-plaintext highlighter-rouge">{% include something.html %}</code>
to include a snippet of HTML, Jekyll looks in a directory called
<code class="language-plaintext highlighter-rouge">_includes</code> to find <code class="language-plaintext highlighter-rouge">something.html</code>.  It always looks there, and
nowhere else, so anything we want people to be able to include in
their pages has to be stored in <code class="language-plaintext highlighter-rouge">_includes</code>.</p>
  </li>
  <li>
    <p>A repository can have another special directory called <code class="language-plaintext highlighter-rouge">_layouts</code>.
If a page like <code class="language-plaintext highlighter-rouge">index.html</code> has a variable called <code class="language-plaintext highlighter-rouge">layout</code>, and
that variable‚Äôs value is <code class="language-plaintext highlighter-rouge">standard.html</code>, Jekyll loads the file
<code class="language-plaintext highlighter-rouge">_layouts/standard.html</code> and copies the content of <code class="language-plaintext highlighter-rouge">index.html</code>
into it, then expands the result.  This is used to give the pages
in a site a uniform appearance.
We have created two layouts for workshop pages:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">workshop.html</code> is used for workshops‚Äô home pages, and is the
layout for the <code class="language-plaintext highlighter-rouge">index.html</code> page in your repo‚Äôs root directory.
That <code class="language-plaintext highlighter-rouge">index.html</code> page‚Äôs header must define several variables as
specified in the the customization instructions in order for
your workshop to be included in our main website.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">page.html</code> is used for any other pages you want to create.
<strong>Note:</strong> if you create extra pages, you <em>must</em> edit the values
in the top section of <code class="language-plaintext highlighter-rouge">_config.yml</code> as described in
<a href="https://swcarpentry.github.com/lesson-example">the lesson template documentation</a>.</p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="extra-directories">Extra Directories</h2>

<p>This workshop template shares resources with the template used for
Carpentry lessons.  As a result, your workshop website‚Äôs repository
contains directories that most workshops don‚Äôt need, but which can be
used to store extra material when necessary:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">_extras/</code>: extra pages (like this one).</li>
  <li><code class="language-plaintext highlighter-rouge">_episodes/</code>: lesson episodes (which workshops usually don‚Äôt have).</li>
  <li><code class="language-plaintext highlighter-rouge">_episodes_rmd/</code>: R Markdown lesson episodes (if any).</li>
  <li><code class="language-plaintext highlighter-rouge">code/</code>: for code samples.</li>
  <li><code class="language-plaintext highlighter-rouge">data/</code>: for data files.</li>
  <li><code class="language-plaintext highlighter-rouge">fig/</code>: for figures and other images.</li>
  <li><code class="language-plaintext highlighter-rouge">files/</code>: for miscellaneous files.</li>
</ul>

<p>For more information on these, please see <a href="https://swcarpentry.github.com/lesson-example">the documentation for the
lesson template</a>.</p>

:ET